








*** Other Themes

#+begin_src emacs-lisp
  ;; (use-package spacemacs-theme
    ;; :config
    ;; (load-theme spacemacs-theme-light)
    ;; )
  (use-package solarized-theme)
  (use-package darktooth-theme)
  (use-package kaolin-themes)
  (use-package gruvbox-theme
    :config
    ;; (load-theme 'gruvbox)
    )

  (use-package solo-jazz-theme
    :config
    ;; (load-theme 'solo-jazz t)
    )


  (use-package vs-light-theme
    :config
    ;; (load-theme 'vs-light)
    )


  (use-package color-theme-sanityinc-tomorrow)
  (use-package color-theme-sanityinc-solarized)
  (use-package kaolin-themes
    :config
    ;; (load-theme 'kaolin-light t)
    (kaolin-treemacs-theme))


#+end_src


** =dashboard=

=dashboard= is an extensible emacs startup screen showing you what's most important.
[[https://github.com/emacs-dashboard/emacs-dashboard][More Information]]

#+begin_src emacs-lisp :tangle no
  ;; Dependency
  (use-package page-break-lines)

  (use-package dashboard
    :config
    (setq show-week-agenda-p t)
    (dashboard-setup-startup-hook))
#+end_src



* Org
#+begin_src emacs-lisp
    ;; Tangle on config file
    (defun my/tangle-emacs-config ()
      "If the current file is this file, the code blocks are tangled"
      (when (equal (buffer-file-name) (expand-file-name "~/.emacs.d/my-literate-emacs-configuration.org"))
        (org-babel-tangle nil "~/.emacs.d/init.el")))

    (use-package org
      :straight (:type built-in)
      :hook
      (after-save . my/tangle-emacs-config)
      (org-mode . (lambda ()
                    (flyspell-mode)
                    (display-fill-column-indicator-mode)
                    (auto-fill-mode)
                    ))
      :init
      (use-package org-indent :straight (:type built-in))
      :config
      ;; -------------------- Org Agenda --------------------
      ;; Org settings
      (setq org-directory "~/Documents/Org") ;; Set default org directory
      (setq org-default-notes-file (concat org-directory "/tasks.org")) ;; Set default org capture file
      ;; Org agenda
      (setq org-todo-keywords
            '((sequence "TODO"  "|" "DONE" "CANCELED")))
      (setq org-agenda-files '("~/Documents/Org/"))
      (setq org-agenda-window-setup 'current-window)
      ;; org capture
      (setq org-capture-templates
            '(("a" "Assignment" entry
               (file+headline "~/Documents/Org/Academic.org" "Assignments")
               "* TODO %?\n")
              ("E" "Exam" entry
               (file+headline "~/Documents/Org/Academic.org" "Exams")
               "* TODO %?\n")
              ("P" "Project" entry
               (file+headline "~/Documents/Org/Academic.org" "Projects")
               "* TODO %?\n")))
      ;; -------------------- Evaluation of Source Blocks --------------------
      ;; Do not confirm when evaluating code blocks
      (setq org-confirm-babel-evaluate nil)
      ;; Run/highlight code using babel in org-mode
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)
         (js . t)
         (latex . t)
         (jupyter . t)
         (sql . t)
         (shell . t)
         (emacs-lisp . t)))
      ;; How to edit source code blocks: [plain, current-window, split-window-below, other-window, other-frame]
      (setq org-src-window-setup 'current-window)
      ;; Edit source code blocks menu
      (setq org-structure-template-alist
            '(("a" . "export ascii\n")
              ("c" . "center\n")
              ("C" . "comment\n")
              ("e" . "src emacs-lisp\n")
              ("E" . "export")
              ("h" . "export html\n")
              ("l" . "src latex\n")
              ("q" . "quote\n")
              ("p" . "src python\n")
              ("s" . "src sql")
              ("v" . "verse\n")))
      ;; -------------------- Export reveal --------------------
      (use-package htmlize)
      ;; (use-package ox-reveal
      ;;   :init
      ;;   (setq org-reveal-root "file:///Users/simenojensen/.emacs.d/Packages/reveal.js")
      ;;   (setq org-reveal-mathjax t))
      ;; -------------------- Various Behavior --------------------
      ;; Follow link when hitting return
      (setq org-return-follows-link t)
      ;; -------------------- Latex Exports --------------------
      ;; auctex
      (use-package tex
        :straight auctex)
      ;; Remove logfiles
      (setq org-latex-logfiles-extensions '(
                                            ;; Default settings
                                            "aux" "bcf" "blg" "fdb_latexmk" "fls" "figlist" "idx" "log" "nav" "out" "ptc" "run.xml" "snm" "toc" "vrb" "xdv"
                                            ;; Added settings
                                            "bbl" "lof" "lot" "tex" "glo" "ist" "glg" "gls" "acn" "acr" "alg" "loa"
                                            ))
      (setq org-latex-remove-logfiles t)
      ;; Set default figure position
      (setq org-latex-default-figure-position "H")
      ;; Set default caption position
      (setq org-latex-caption-above nil) ;; '("table" "image")
      ;; Set default export to async
      (setq org-export-in-background nil)
      ;; Remove default header exports
      (setq org-export-with-title t
            org-export-with-date t
            org-export-with-author t
            org-export-with-creator nil
            org-export-with-toc t
            )
      ;; add glossary and acronyms
      (add-to-list 'org-export-before-parsing-hook 'org-ref-acronyms-before-parsing)
      (add-to-list 'org-export-before-parsing-hook 'org-ref-glossary-before-parsing)
      ;; Latex compilation
      ;; (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
      (setq org-latex-pdf-process
            '("pdflatex -interaction nonstopmode -output-directory %o %f"
              "bibtex %b"
              "makeglossaries %b"
              "pdflatex -interaction nonstopmode -output-directory %o %f"
              "pdflatex -interaction nonstopmode -output-directory %o %f"))
      ;; Latex classes
      (setq org-latex-classes
            '(("article"
               "
    \\documentclass[10pt]{article}
    % Setup
    \\usepackage[english]{babel}
    \\usepackage[utf8]{inputenc}
    \\usepackage{import}
    \\usepackage[hidelinks]{hyperref}
    \\usepackage{url}
    \\hypersetup{colorlinks=false}
    % Geometry
    \\usepackage[a4paper, width=150mm, top=25mm, bottom=25mm]{geometry}
    \\usepackage{parskip}
    \\setlength{\\parindent}{0pt}
    \\setlength{\\parskip}{\\baselineskip}
    % Math
    \\usepackage{amsmath}
    \\usepackage{amssymb}
    % Tables
    \\usepackage{array}
    \\usepackage{multirow}
    \\usepackage{longtable}
    % Color
    \\usepackage{xcolor}
    % Figures
    \\usepackage{graphicx} % To show figures
    \\usepackage{wrapfig}  % Wrap text around figures
    \\usepackage{subcaption}
    \\usepackage{rotating}
    % Others
    \\usepackage{float}
    \\usepackage{lastpage}
    \\usepackage[normalem]{ulem}
    \\usepackage{capt-of}
    \\usepackage{csquotes}
    \\usepackage{enumitem}
    \\usepackage{ragged2e}
    \\setlist{nosep} % or \setlist{noitemsep} to leave space around whole list
    % TOC and Appendix
    \\usepackage{appendix}
    \\usepackage[nottoc]{tocbibind}
      \\usepackage[acronyms, section]{glossaries}
      \\makeglossaries
    % Footers and Headers
    \\usepackage{fancyhdr}
    \\pagestyle{fancy}
    \\fancyhf{}
    \\fancyfoot[C]{\\thepage}
    \\renewcommand{\\footrulewidth}{0.1pt}
    % Bibliography
    \\usepackage{natbib}
    \\makeatletter
    \\renewcommand{\\maketitle}{%
    \\begingroup\\parindent0pt
    \\Large{\\bfseries\\@title}\\newline
    \\normalsize{\\bfseries\\@author}\\newline
    \\normalsize{\\@date}\\vspace{-0.2cm}\\newline
    \\noindent\\makebox[\\textwidth]{\\rule{\\textwidth}{0.4pt}}
    \\endgroup\\@afterindentfalse\\@afterheading}
    \\makeatother
    [NO-DEFAULT-PACKAGES]
    "
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

              ("report"
               "
    \\documentclass[10pt]{report}
    % Setup
    \\usepackage[english]{babel}
    \\usepackage[utf8]{inputenc}
    \\usepackage{import}
    \\usepackage[hidelinks]{hyperref}
    \\usepackage{url}
    \\hypersetup{colorlinks=false}
    % Geometry
    \\usepackage[a4paper, width=150mm, top=25mm, bottom=25mm]{geometry}
    \\usepackage{parskip}
    \\setlength{\\parindent}{0pt}
    \\setlength{\\parskip}{\\baselineskip}
    % Math
    \\usepackage{amsmath}
    \\usepackage{amssymb}
    \\usepackage[ruled, vlined]{algorithm2e}
    \\usepackage{mathrsfs}
    % Tables
    \\usepackage{array}
    \\usepackage{multirow}
    \\usepackage{longtable}
    \\usepackage{lscape}
    % Color
    \\usepackage{xcolor}
    % Figures
    \\usepackage{graphicx} % To show figures
    \\usepackage{wrapfig}  % Wrap text around figures
    \\usepackage{subcaption}
    \\usepackage{rotating}
    % others
    \\usepackage{float}
    \\usepackage{lastpage}
    \\usepackage[normalem]{ulem}
    \\usepackage{capt-of}
    \\usepackage{csquotes}
    \\usepackage{enumitem}
    \\usepackage{ragged2e}
    \\usepackage{comment}
    \\setlist{nosep} % or \setlist{noitemsep} to leave space around whole list
    % TOC and Appendix
    \\usepackage{appendix}
    \\usepackage[nottoc]{tocbibind}
      \\usepackage[acronyms, section]{glossaries}
      \\makeglossaries
    % Footers and Headers
    \\usepackage{fancyhdr}
    \\pagestyle{fancy}
    \\fancyhf{}
    \\fancyfoot[C]{\\thepage}
    \\renewcommand{\\footrulewidth}{0.1pt}
    % Bibliography
    \\usepackage{natbib}

    [NO-DEFAULT-PACKAGES]
    "

               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))


              ;; Book
              ("book" "\\documentclass[10pt]{book}"
               ("\\part{%s}" . "\\part*{%s}")
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
              ;; Beamer
              ("beamer"
  "
  \\documentclass[presentation]{beamer}
\\usepackage{listings}
\\lstloadlanguages{XML,XSLT}
\\lstset{defaultdialect=XSLT,frame=single,
	framesep=.5em,backgroundcolor=\\color{AliceBlue},
	rulecolor=\\color{LightSteelBlue},framerule=1pt}
\\usepackage{xcolor}
\\newcommand\\basicdefault[1]{\\scriptsize\\color{Black}\\ttfamily#1}
\\lstset{basicstyle=\\basicdefault{\\spaceskip.5em}}
\\lstset{literate=
	    {§}{{\\S}}1
	    {©}{{\\raisebox{.125ex}{\\copyright}\\enspace}}1
	    {«}{{\\guillemotleft}}1
	    {»}{{\\guillemotright}}1
	    {’}{{'}}1
	    {…}{{\dots}}1
	    keywordstyle=\\color{DarkGreen}\bfseries,
	    identifierstyle=\\color{DarkRed},
	    commentstyle=\\color{Gray}\\upshape,
	    stringstyle=\\color{DarkBlue}\\upshape,
	    emphstyle=\\color{Chocolate}\\upshape,
	    showstringspaces=false,
	    columns=fullflexible,
	    keepspaces=true}

  [DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]
  "
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))

            ))
      ;; -------------------- Bibliography --------------------
      (setq org-latex-prefer-user-labels t)
      (use-package bibtex
        :straight (:type built-in)
        :init
        (use-package ivy-bibtex)
        (setq bibtex-completion-bibliography '("~/Documents/Org/Bibliography/Master.bib"))
        (setq bibtex-completion-library-path nil)
        (setq bibtex-completion-notes-path nil)
        (setq bibtex-completion-pdf-field "file")
        (setq bibtex-completion-pdf-open-function
              (lambda (fpath)
                (call-process "open" nil 0 nil fpath))))

      (use-package org-ref
        :bind
        (:map bibtex-mode-map
              ("H-]" . org-ref-bibtex-hydra/body)
              :map org-mode-map
              ("C-c ]" . org-ref-insert-link)
              ("s-]" . org-ref-insert-link-hydra/body))
        :init
        (use-package org-ref-ivy :straight (:type built-in))
        (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
              org-ref-insert-cite-function 'org-ref-cite-insert-ivy
              org-ref-insert-label-function 'org-ref-insert-label-link
              org-ref-insert-ref-function 'org-ref-insert-ref-link))

      ;; -------------------- PDF --------------------
      (use-package pdf-tools
        :init
        (use-package tablist)

        :mode ("\\.pdf\\'" . pdf-view-mode)
        :bind
        (:map pdf-view-mode-map
              ("C-s" . isearch-forward))
        :config
        (pdf-loader-install)
        (setq pdf-view-display-size 'fit-page)
        )
      (use-package pdf-view-restore
        :after pdf-tools
        :hook
        (pdf-view-mode . pdf-view-restore-mode)
        :config
        (setq pdf-view-restore-filename "~/.emacs.d/.pdf-view-restore")
        )
      ;; -------------------- Org Download --------------------
      ;; https://github.com/abo-abo/org-download
      (use-package org-download
        :config
        (setq org-download-display-inline-images t))
      ;; -------------------- Beautifying Org Mode --------------------
      ;; Emphasis - disable strikethrough
      (setq org-emphasis-alist '(("*" bold)
                                 ("/" italic)
                                 ("_" underline)
                                 ("=" org-verbatim verbatim)
                                 ("~" org-code verbatim)
                                 ("+" (:strike-through nil))))
      ;; Emphasis - hide markers
      (setq org-hide-emphasis-markers t)
      ;; Org-Superstar - https://github.com/integral-dw/org-superstar-mode
      (use-package org-superstar
        :hook
        (org-mode . (lambda () (org-superstar-mode 1)))
        :config
        (setq org-superstar-headline-bullets-list '("◉" "◈" "○" "▷"))
        ;; Do not cycle after bottom level
        (setq org-superstar-cycle-headline-bullets nil)
        )
      ;; Fonts and Section Title color
      (let* ((variable-tuple
              (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
                    ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                    ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                    ((x-list-fonts "Verdana")         '(:font "Verdana"))
                    ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                    (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
             (base-font-color     (face-foreground 'default nil 'default))
             (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

        (custom-theme-set-faces
         'user
         `(org-level-8 ((t (,@headline ,@variable-tuple))))
         `(org-level-7 ((t (,@headline ,@variable-tuple))))
         `(org-level-6 ((t (,@headline ,@variable-tuple))))
         `(org-level-5 ((t (,@headline ,@variable-tuple))))
         `(org-level-4 ((t (,@headline ,@variable-tuple :forground "RoyalBlue1"   :height 1.1))))
         `(org-level-3 ((t (,@headline ,@variable-tuple :foreground "firebrick3" :height 1.25))))
         `(org-level-2 ((t (,@headline ,@variable-tuple :foreground "green3" :height 1.5))))
         `(org-level-1 ((t (,@headline ,@variable-tuple :foreground "DarkOrange2" :height 1.75))))
         `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
      ;; Indentation
      (setq org-startup-indented nil)
      ;; prettify symbols
      (setq org-pretty-entities nil)
      ;; images - set width
      (setq org-startup-with-inline-images t
            org-image-actual-width '(300))

      )
#+end_src

#+RESULTS:
| (lambda nil (flyspell-mode) (display-fill-column-indicator-mode) (auto-fill-mode)) | (lambda nil (org-superstar-mode 1)) | (closure (bootstrap-version t) nil (flyspell-mode) (display-fill-column-indicator-mode) (auto-fill-mode)) | (closure (bootstrap-version t) nil (org-superstar-mode 1)) | org-ref-org-menu | jupyter-org-interaction-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (closure ((mode . org-mode-hook) (--dolist-tail--) bootstrap-version t) nil (display-line-numbers-mode 0)) |

* Writing
** =flyspell=
#+begin_src emacs-lisp
  (use-package flyspell
    :config
    (setenv
     "DICPATH"
     (concat (getenv "HOME") "/Library/Spelling"))
    (setenv "DICTIONARY" "en_US")
    ;; Tell ispell-mode to use hunspell.
    (setq ispell-program-name "hunspell")
    (setq-default ispell-hunspell-dict-paths-alist
                  '(("en_US" "~/Library/Spelling/en_US.aff")
                    ("nb" "~/Library/Spelling/nb.aff")
                    )))

  (defun my/save-word-to-personal-dictionary ()
    "Save word to personal dictionary"
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))

  ;; Remap
  (unbind-key "C-c $" flyspell-mode-map)
  (bind-key "C-c $" 'my/save-word-to-personal-dictionary flyspell-mode-map)

  ;; Norsk tastatur
  (bind-key "C-ø" 'flyspell-auto-correct-previous-word flyspell-mode-map)
#+end_src

** =synosaurus=

Synosaurus is a thesaurus fontend for Emacs with pluggable backends.
[[https://github.com/hpdeifel/synosaurus][More Information]]

#+begin_src emacs-lisp
  (use-package synosaurus
    :init
    (synosaurus-mode)
    :hook
    (text-mode . synosaurus-mode)
    :config
    (setq synosaurus-choose-method 'ido))
#+end_src

** =guess-language=
=guess-language= is an Emacs minor mode that detects the language of what you're
typing. Automatically switches the spell checker and typo-mode if present.
[[https://github.com/tmalsburg/guess-language.el][More Information]]

#+begin_src emacs-lisp :tangle no
  (use-package guess-language
    :hook
    (text-mode . guess-language-mode)
    :config
    (setq guess-language-langcodes '((en . ("en_US" "English"))
                                     (no . ("nb_NO" "Norwegian"))))
    (setq guess-language-languages '(en no))
    (setq guess-language-min-paragraph-length 45))
#+end_src

** languagetool
#+begin_src emacs-lisp
  (use-package langtool
    :init
    (setq langtool-default-language "en-US")
    (setq langtool-bin "/opt/homebrew/bin/languagetool")
    )
#+end_src

** =lsp-grammarly=
[[https://github.com/emacs-grammarly/lsp-grammarly][More Information]]
#+begin_src emacs-lisp :tangle no
  (use-package lsp-grammarly
    :hook (org-mode . (lambda ()
                        (require 'lsp-grammarly)
                        (lsp))))
#+end_src

** =unfill-paragraph=
#+begin_src emacs-lisp
      ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
      (defun unfill-paragraph (&optional region)
        "Takes a multi-line paragraph and makes it into a single line of text."
        (interactive (progn (barf-if-buffer-read-only) '(t)))
        (let ((fill-column (point-max))
              ;; This would override `fill-column' if it's an integer.
              (emacs-lisp-docstring-fill-column t))
          (fill-paragraph nil region)))
#+end_src

* Elisp Functions
** Read content of file

#+begin_src emacs-lisp
  (defun my/get-file-content-as-string (filePath)
    "Return filePath's content as string."
    (with-temp-buffer
      (insert-file-contents filePath)
      (buffer-string)))
#+end_src

** Edit Configuration File

#+begin_src emacs-lisp
  (defun my/edit-config ()
    "Opens the my-literate-emacs-configuration.org file."
    (interactive)
    (find-file "~/.emacs.d/my-literate-emacs-configuration.org"))
#+end_src

** Open bib file
#+begin_src emacs-lisp
  (defun my/bib ()
    "Opens the master bibliography file."
    (interactive)
    (find-file "~/Documents/Org/Bibliography/Master.bib"))
#+end_src

** Switching jupyter kernel in conda environment

[[https://sqrtminusone.xyz/posts/2021-05-01-org-python/][More Information]]

#+begin_src emacs-lisp
  (defun my/jupyter-refresh-kernelspecs ()
    "Refresh Jupyter kernelspecs"
    (interactive)
    (jupyter-available-kernelspecs t))
#+end_src

** Insert Org Startup Template

#+begin_src emacs-lisp
  (defun my/org-startup ()
    (interactive)
    (insert "#+TITLE: \n#+AUTHOR: Simen Omholt-Jensen\n#+OPTIONS: toc:nil\n"))
#+end_src

#+begin_src emacs-lisp
  (defun my/org-notebook-startup ()
    (interactive)
    (insert "#+TITLE: \n#+AUTHOR: Simen Omholt-Jensen\n#+OPTIONS: toc:nil\n#+STARTUP: overview\n")
    (insert "#+PROPERTY: header-args:python :session notebook :kernel notebook :async yes :results output :exports both :eval never-export\n\n")
    (insert "** Imports\n #+begin_src python\n")
    (insert "  import numpy as np\n  import pandas as pd\n  import matplotlib.pyplot as plt\n")
    (insert "  import matplotlib as mpl\n  mpl.rcParams['figure.facecolor']='w'\n")
    (insert "  #+end_src\n\n"))
#+end_src

** Open HTML buffer in Chrome
#+begin_src emacs-lisp
  (defun my/browse-url-of-buffer-with-chrome ()
    "Same as `browse-url-of-buffer` but using chrome"
    (interactive)
    ;; (shell-command (concat "open -a 'Google Chrome.app' file://" buffer-file-name)))
   (shell-command (concat "open -a 'Google Chrome.app' " buffer-file-name)))
#+end_src

** transpose windows
[[https://emacs.stackexchange.com/questions/5371/how-to-change-emacs-windows-from-vertical-split-to-horizontal-split][More Information]]
#+begin_src emacs-lisp
  (defun window-split-toggle ()
    "Toggle between horizontal and vertical split with two windows."
    (interactive)
    (if (> (length (window-list)) 2)
        (error "Can't toggle with more than 2 windows!")
      (let ((func (if (window-full-height-p)
                      #'split-window-vertically
                    #'split-window-horizontally)))
        (delete-other-windows)
        (funcall func)
        (save-selected-window
          (other-window 1)
          (switch-to-buffer (other-buffer))))))

  (bind-key "C-x C-t" 'window-split-toggle)
#+end_src

* Tools
** Wireshark
*** =pcap-mode=
[[https://github.com/orgcandman/pcap-mode][More Information]]

#+begin_src emacs-lisp :tangle no
  (use-package pcap-mode
    :mode
    ("\\.pcapng\\'" . pcap-mode)
    :load-path (lambda () (expand-file-name "site-elisp/pcap-mode" user-emacs-directory)))
#+end_src

** Internet
*** =google-this=

[[http://pragmaticemacs.com/emacs/google-search-from-inside-emacs/][More Information]]

#+begin_src emacs-lisp
  (use-package google-this
    :diminish
    :config
    (google-this-mode t))
#+end_src

*** =engine-mode=

#+begin_src emacs-lisp
  (use-package engine-mode
    :config
    (engine-mode t)
    (defengine google
      "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
      :keybinding "g")
    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s")
    (defengine google-maps
      "http://maps.google.com/maps?q=%s"
      :docstring "Mappin' it up.")
    (defengine youtube
      "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
      :keybinding "y"))
#+end_src

** =wgrep=

#+begin_src emacs-lisp
  (use-package wgrep)
#+end_src

** Tramp
#+begin_src emacs-lisp
  (use-package tramp
    :straight (:type built-in)
    :config
    (setq tramp-default-method "ssh")
    )
#+end_src

* Experimental

#+begin_src emacs-lisp
#+end_src

#+RESULTS:

*** =forge=
[[https://emacsair.me/2018/12/19/forge-0.1/][forge]]

** Writing tools to look into
-[[https://people.umass.edu/weikaichen/post/emacs-academic-tools/][emacs-academic-tools]]
- [[https://github.com/nashamri/academic-phrases][academic-phrases]]
- [[https://github.com/gromnitsky/wordnut][wordnut]]
- [[https://github.com/hpdeifel/synosaurus][synosaurus]]
- [[https://github.com/org-roam/org-roam][org-roam]]
  - [[https://rgoswami.me/posts/org-note-workflow/][org-mode notes workflow]]
- =org2blog= to wordspress
- =org-publish=
