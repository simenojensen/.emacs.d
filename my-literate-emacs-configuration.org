#+TITLE: My Literate Emacs Configuration
#+AUTHOR: Simen Omholt-Jensen
#+STARTUP:     hideall hidestars
#+PROPERTY:     header-args:emacs-lisp     :tangle "~/.emacs.d/init.el"

* Start up
** Lexical Binding

#+begin_quote
Until Emacs 24.1 (June 2012), Elisp only had dynamically scoped variables, a feature, mostly by accident, common to old lisp dialects. While dynamic scope has some selective uses, it’s widely regarded as a mistake for local variables, and virtually no other languages have adopted it.
#+end_quote

[[https://nullprogram.com/blog/2016/12/22/][More Information]]

#+begin_src emacs-lisp
;;; init.el --- -*- lexical-binding: t -*-
#+end_src
** Avoid Garbage Collection at Startup

#+begin_quote
The GC can easily double startup time, so we suppress it at startup by turning up =gc-cons-threshold= (and perhaps =gc-cons-percentage=) temporarily:
#+end_quote

[[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][More Information]]

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
        gc-cons-percentage 0.6)
#+end_src

** Benchmarking

First, declare a hook which will benchmark the startup process. It reports how long the it took to start up, and how many garbage collections were performed.

[[https://blog.d46.us/advanced-emacs-startup/][More Information]]

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src

** Unset =file-name-handler-alist=

Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it won’t need any of them.

#+begin_src emacs-lisp
  (defvar file-name-handler-alist-original file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src

* Garbage Collection
** Set =gc-cons-threshold= Smaller for Interactive Use

A large =gc-cons-threshold= may cause freezing and stuttering during long-term interactive use. If you experience freezing, decrease this amount, if you increase stuttering, increase this amount.

#+begin_src emacs-lisp
  (defvar better-gc-cons-threshold 100000000 ; 100mb
    "The default value to use for `gc-cons-threshold'.

  If you experience freezing, decrease this.  If you experience stuttering, increase this.")

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold better-gc-cons-threshold)
              (setq file-name-handler-alist file-name-handler-alist-original)
              (makunbound 'file-name-handler-alist-original)))
#+end_src

Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (if (boundp 'after-focus-change-function)
                  (add-function :after after-focus-change-function
                                (lambda ()
                                  (unless (frame-focus-state)
                                    (garbage-collect))))
                (add-hook 'after-focus-change-function 'garbage-collect))
              (defun gc-minibuffer-setup-hook ()
                (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

              (defun gc-minibuffer-exit-hook ()
                (garbage-collect)
                (setq gc-cons-threshold better-gc-cons-threshold))

              (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
              (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+end_src

* Package Management
** =package.el=

By default, Emacs 24 or later comes with a built-in package management system (=package.el=). To add further functionality such as adding package repositories and tweaking package configurations, =package.el= needs to be loaded in the =init.el= file during startup.

[[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Package-Installation][More Information]]

#+begin_src emacs-lisp
  (require 'package)
#+end_src

** Package Repositories
*** ELPA/MELPA

By default, Emacs comes with the Emacs Lisp Package Archive (ELPA). As the packages need to be FSF-sanctioned, there aren't that many to choose from. By adding the Milkypostman's Emacs Lisp Package Archive ([[https://melpa.org/][MELPA]]), an enormous amount of packages become available. Remember to add ~https~ to urls.

#+begin_src emacs-lisp
  (setq-default package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                                   ("melpa" . "https://melpa.org/packages/")
                                   ("org" . "https://orgmode.org/elpa/")))
#+end_src

*** Other Packages

Other packages will be placed in =site/elisp= as ~git submodules~. They will be added to the load path in their =use-package= declaration.

**** Add Packages Manually from Git

#+begin_src shell :tangle no
  cd site-elisp/
  git submodule add https://github.com/foo/bar.git
#+end_src

**** Update Manually Added Packages

#+begin_src shell :tangle no
  git submodule init
  git submodule update
#+end_src

** Prepare Packages for Configuration

- Run =package-initialize= to set up the load-paths and autoloads for installed packages.

[[https://www.emacswiki.org/emacs/InstallingPackages][More Information]]

#+begin_src emacs-lisp
  (package-initialize)
#+end_src

- Set =package-enable-at-startup= to =nil= to prevent superfluous loading of packages.

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Installation.html][More Information]]

#+begin_src emacs-lisp
  (setq-default package-enable-at-startup nil)
#+end_src

** Bootstrap =use-package=

- The =use-package= macro allows cleaner configuration of package loading and installation.

[[https://github.com/jwiegley/use-package][More Information]]

#+begin_src emacs-lisp
  (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
#+end_src

- By setting =use-package-always-ensure= to =t=, =use-package= will install packages that are not already installed.

[[https://github.com/jwiegley/use-package#package-installation][More Information]]

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

** Automatically Update Packages with =auto-package-update=.

[[https://github.com/rranelli/auto-package-update.el][More Information]]

#+begin_src emacs-lisp
  (use-package auto-package-update
    :config
    (setq-default auto-package-update-interval 7) ;; in days
    (setq-default auto-package-update-delete-old-versions t)
    (setq-default auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+end_src

** Prefer Newer =.el= Files Over Older =.elc= Files.

#+begin_src emacs-lisp
  (setq-default load-prefer-newer t)
#+end_src

** Automatically Compile Packages During Startup.

[[https://github.com/emacscollective/auto-compile][More Information]]

#+begin_src emacs-lisp
  (use-package auto-compile
    :config
    (auto-compile-on-load-mode)
  (auto-compile-on-save-mode))
#+end_src

** =bind-key=

To use with =use-package=.

#+begin_src emacs-lisp
  (require 'bind-key)
#+end_src

** =diminish=

The =diminish= package makes it possible to remove clutter from the modeline. The =:diminish= keyword in the =use-package= declarations signify =diminish= invocation.

[[https://github.com/myrjola/diminish.el][More Information]]

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

** =try=

The =try= package let's you try new packages without installed them. On the next restart of Emacs, they are not loaded.

[[https://github.com/larstvei/Try][More Information]]

#+begin_src emacs-lisp
  (use-package try)
#+end_src

* Global Functionalities
** User Information
#+begin_src emacs-lisp
  (setq user-full-name "Simen Omholt-Jensen")
  (setq user-mail-address "simen@omholt-jensen.com")
#+end_src
** Convenient Default Settings

#+begin_src emacs-lisp
  (setq frame-title-format '(:eval (if (buffer-file-name)                                 ;; Set frame title to *Buffer/File Name*
                                       (abbreviate-file-name (buffer-file-name)) "%b")))
  (global-display-line-numbers-mode)                                                      ;; Display line numbers
  (setq column-number-mode t)                                                             ;; Display column numbers
  (setq-default inhibit-startup-screen t)                                                 ;; Don't show the startup message
  (setq-default initial-scratch-message nil)                                              ;; Set initial scratch message to nil
  (setq debug-on-error nil)                                                               ;; Receive more information errors
  (setq custom-file "~/.emacs.d/custom.el")
  (ignore-errors (load custom-file))                                                      ;; Load custom.el if it exists
  (setq-default create-lockfiles nil)                                                     ;; Disable lock files
  (setq-default backup-directory-alist '(("." . "/Users/simenojensen/.emacs.d/backups"))) ;; Save backup files
  (setq-default indent-tabs-mode nil)                                                     ;; Don't use hard tabs
  (setq echo-keystrokes 0.1)                                                              ;; Echo keystrokes fast
  (fset 'yes-or-no-p 'y-or-n-p)                                                           ;; y-or-n instead of yes-or-no
  (add-hook 'before-save-hook 'delete-trailing-whitespace)                                ;; Delete trailing whitespace on save
  (setq require-final-newline t)                                                          ;; Add a newline at end of file on save
  (global-auto-revert-mode t)                                                             ;; Automatically update buffers if a file content has changed on disk
  (save-place-mode t)                                                                     ;; Save position of the point in file
  (global-hl-line-mode t)                                                                 ;; Highlight the line with the point
  (add-hook 'before-save-hook 'time-stamp)                                                ;; Update timestamp of 8 first lines on save
  (setq large-file-warning-threshold 100000000)                                           ;; Warn when opening file larger than 100 MB
  (desktop-save-mode 1)                                                                   ;; save desktop
  (setq history-delete-duplicates t)                                                      ;; delete duplicate history
  (setq revert-without-query '(".*"))                                                     ;; do not ask when reverting buffer
#+end_src

** Smooth Scrolling

Configurations for smooth scrolling

#+begin_src emacs-lisp
  ;; Vertical Scroll
  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 101)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq auto-window-vscroll nil)
  (setq fast-but-imprecise-scrolling nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)
  ;; Horizontal Scroll
  (setq hscroll-step 1)
  (setq hscroll-margin 1)
#+end_src

** Disable GUIs

#+begin_src emacs-lisp
  (menu-bar-mode -1)                         ;; Disable menu bar
  (tool-bar-mode -1)                         ;; Disable tool bar
  (scroll-bar-mode -1)                       ;; Disable scroll bar
  (blink-cursor-mode -1)                     ;; Disable blinking cursor
  (setq-default ring-bell-function 'ignore)  ;; Disable bell function
#+end_src

** Killing Emacs

#+begin_src emacs-lisp
  (setq-default confirm-kill-emacs nil)        ;; Do not confirm when killing Emacs
  (setq-default confirm-kill-processes nil)    ;; do not confirm when killing processes before killing Emacs
#+end_src

* Keybindings
** which-key

The =which-key= package automatically displays potential command information as command keys are typed. This makes it easy to explore Emacs functionality.

[[https://github.com/justbur/emacs-which-key][More Information]]

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5)
    (setq which-key-frame-max-height 40)
    (which-key-mode))
#+end_src

** =bind-key=
*** Window Adjustment

#+begin_src emacs-lisp
  (bind-key "s-<left>" 'shrink-window-horizontally)
  (bind-key "s-<right>" 'enlarge-window-horizontally)
  (bind-key "s-<down>" 'shrink-window)
  (bind-key "s-<up>" 'enlarge-window)
#+end_src

*** Truncate Lines

#+begin_src emacs-lisp
  (bind-key "C-x C-l" 'toggle-truncate-lines)
#+end_src

*** Motion

#+begin_src emacs-lisp
  (bind-key "M-p" 'backward-paragraph)
  (bind-key "M-n" 'forward-paragraph)
  (bind-key "M-g" 'goto-line)
#+end_src

*** ibuffer

#+begin_src emacs-lisp
  (bind-key "C-x b" 'ibuffer)
#+end_src

* Interface Enhancement
** =crux=

=crux= is Collection of Ridiculously Useful eXtensions for Emacs.

[[https://github.com/bbatsov/crux][More Information]]

#+begin_src emacs-lisp
  (use-package crux
    :bind
    ("C-a" . crux-move-beginning-of-line)
    :config
    (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+end_src

** =Ivy= / =Counsel= / =Swiper= / =amx=

=Ivy= is an interactive interface for completion in Emacs.

[[https://oremacs.com/swiper/][More Information]]

=amx= prioritizes your most used commands

[[https://github.com/DarwinAwardWinner/amx][More Information]]

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :init
    (use-package amx :defer t)
    (use-package counsel :diminish :config (counsel-mode 1))
    (use-package swiper :defer t)
    (ivy-mode 1)
    :bind
    (("C-x C-f" . counsel-find-file)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable)
    ("C-h l" . counsel-find-library)
    ("C-h i" . counsel-info-lookup-symbol)
    ("C-h u" . counsel-unicode-char)
    ("M-x" . counsel-M-x)
    ("M-v" . counsel-yank-pop)
    ("C-x C-b" . ivy-switch-buffer)
    ("C-s" . swiper-isearch))
    :config
    (ivy-mode 1)
    (setq ivy-height 10)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-display-style 'fancy)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
#+end_src
** =undo-tree=

=undo-tree=, a feature that provides a visualization of the undos in a file.

[[https://www.emacswiki.org/emacs/UndoTree][More Information]]

#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode)
  :config
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-visualizer-timestamps t))
#+end_src

** =color-rg=

=color rg= is a search and refactoring tool based on *ripgrep*.

[[https://github.com/manateelazycat/color-rg][More Information]]

#+begin_src emacs-lisp
  (use-package color-rg
    :load-path (lambda () (expand-file-name "site-elisp/color-rg" user-emacs-directory))
    :bind
    ("C-M-s" . color-rg-search-input))
#+end_src

** =Dired=

=Dired= is the built-in directory editor

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][More Information]]

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :bind
    (("C-x C-j" . dired-jump)
     ("C-x j" . dired-jump-other-window))
    :custom
    ;; Always delete and copy recursively
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    ;; Auto refresh Dired, but be quiet about it
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    ;; Quickly copy/move file in Dired
    (dired-dwim-target t)
    ;; Move files to trash when deleting
    (delete-by-moving-to-trash t)
    ;; Load the newest version of a file
    (load-prefer-newer t)
    ;; Detect external file changes and auto refresh file
    (auto-revert-use-notify nil)
    (auto-revert-interval 3) ; Auto revert every 3 sec
    :config
    ;; Enable global auto-revert
    (global-auto-revert-mode t)
    ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
    (put 'dired-find-alternate-file 'disabled nil)
    :hook
    (dired-mode . (lambda ()
                    (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                    (local-set-key (kbd "RET") #'dired-find-alternate-file)
                    (local-set-key (kbd "^")
                                   (lambda () (interactive) (find-alternate-file ".."))))))
#+end_src

** =disk-usage=

=disk-usage= is a file system analyzer that offers a tabulated view of file listings sorted by size.

[[https://gitlab.com/ambrevar/emacs-disk-usage][More Information]]

#+begin_src emacs-lisp
  (use-package disk-usage)
#+end_src

** =restart-emacs=

=restart-emacs= is a simple emacs package to restart emacs from within emacs.

[[https://github.com/iqbalansari/restart-emacs][More Information]]

#+begin_src emacs-lisp
  (use-package restart-emacs)
#+end_src

* Navigation
** =ace-window=

=ace-window= offers fast window navigation with [[https://github.com/zamansky/using-emacs/blob/master/myinit.org#ace-windows-for-easy-window-switching][customizable]] prompts.

[[https://github.com/abo-abo/ace-window][More Information]]

#+begin_src emacs-lisp
  (use-package ace-window
    :bind
    ("C-x C-o" . ace-window)
    ("C-x o" . ace-window)
    :init
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+end_src

** =winner-mode=

Built-in =winner-mode= for remembering previous window actions.

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

* OS Specific Settings

Detect which OS Emacs is being run on, and configure keybindings accordingly.

#+begin_src emacs-lisp :noweb tangle
  (cond ((eq system-type 'darwin)
         <<macOS>>
         )
        ((eq system-type 'windows-nt)
         <<Windows>>
         )
        ((eq system-type 'gnu/linux)
         <<Linux>>
         ))
#+end_src

** macOS

By setting the ~M~ to ~⌘~, ~A~ to ~^~ (left option)  and ~S~ to ~^~ (right option), we can emulate some of the macOS keyboard configurations.

#+begin_src emacs-lisp :tangle no :noweb-ref macOS
  (customize-set-variable 'mac-command-modifier 'meta)
  (customize-set-variable 'mac-option-modifier 'alt)
  (customize-set-variable 'mac-right-command-modifier 'super)
#+end_src

Next, we are binding ~M-=~ to increase the font size, and ~M--~ to decrease the font size.

#+begin_src emacs-lisp :tangle no :noweb-ref macOS
  (bind-key "M-=" 'text-scale-increase)
  (bind-key "M--" 'text-scale-decrease)
#+end_src

Lastly, we make sure the =$PATH= is loaded from the default shell.

[[https://github.com/purcell/exec-path-from-shell][More Information]]

#+begin_src emacs-lisp :tangle no :noweb-ref macOS
  (use-package exec-path-from-shell
    :defer nil
    :config
    (setq exec-path-from-shell-variables  '("PATH" "MANPATH" "AIRTABLE_API_KEY" "TSI_ENVIRONMENT" "TSI_TENANT_ID" "TSI_CLIENT_ID" "TSI_CLIENT_SECRET" "TSI_APPLICATION_NAME" "VIRTUAL_ENV" "LANG" "LC_ALL" "LC_CTYPE"))
    (exec-path-from-shell-initialize))
#+end_src

** Windows

Not implemented

#+begin_src emacs-lisp :tangle no :noweb-ref Windows

#+end_src

** Linux

Not implemented

#+begin_src emacs-lisp :tangle no :noweb-ref Linux

#+end_src

* Console
** Still looking for the perfect terminal
* General Programming
** Magit

Magit is an interface to the version control system Git, implemented as an Emacs package. Magit aspires to be a complete Git porcelain.

[[https://magit.vc/][More Information]]

#+begin_src emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status))
#+end_src

** Projectile

Projectile is a project interaction library for Emacs.

[[https://docs.projectile.mx/projectile/index.html][More Information]]

#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (setq projectile-completion-system 'ivy)
    (projectile-mode +1))
#+end_src

** =treemacs=

=treemacs= is a file and project explorer similar to NeoTree or vim’s NerdTree, but largely inspired by the Project Explorer in Eclipse.

[[https://github.com/Alexander-Miller/treemacs][More Information]]

#+begin_src emacs-lisp
  (use-package treemacs
    :custom
    (treemacs-collapse-dirs 3)
    (treemacs-deferred-git-apply-delay 0.5)
    (treemacs-display-in-side-window t)
    (treemacs-file-event-delay 5000)
    (treemacs-file-follow-delay 0.2)
    (treemacs-follow-after-init t)
    (treemacs-follow-recenter-distance 0.1)
    (treemacs-git-command-pipe "")
    (treemacs-goto-tag-strategy 'refetch-index)
    (treemacs-indentation 2)
    (treemacs-indentation-string " ")
    (treemacs-is-never-other-window nil)
    (treemacs-max-git-entries 5000)
    (treemacs-no-png-images nil)
    (treemacs-no-delete-other-windows t)
    (treemacs-project-follow-cleanup nil)
    (treemacs-persist-file (expand-file-name ".cache/treemacs-persist" user-emacs-directory))
    (treemacs-recenter-after-file-follow nil)
    (treemacs-recenter-after-tag-follow nil)
    (treemacs-show-cursor nil)
    (treemacs-show-hidden-files t)
    (treemacs-silent-filewatch nil)
    (treemacs-silent-refresh nil)
    (treemacs-sorting 'alphabetic-desc)
    (treemacs-space-between-root-nodes t)
    (treemacs-tag-follow-cleanup t)
    (treemacs-tag-follow-delay 1.5)
    (treemacs-width 50)
    :config
    :bind
    (("M-0" . treemacs-select-window)
     (:map treemacs-mode-map ("C-p" . treemacs-previous-line))
     (:map treemacs-mode-map ("C-n" . treemacs-next-line))))
#+end_src

*** Treemacs Magit

#+begin_src emacs-lisp
  (use-package treemacs-evil
    :after treemacs evil)
#+end_src

*** Treemacs Projectile

#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :after treemacs projectile)
#+end_src

*** Treemacs Icons Dired

#+begin_src emacs-lisp
  (use-package treemacs-icons-dired
    :after treemacs dired
    :disabled
    :config
    (treemacs-icons-dired-mode))
#+end_src

** Dump Jump

An Emacs "jump to definition" package for 40+ languages

[[https://github.com/jacktasia/dumb-jump][More Information]]

#+begin_src emacs-lisp
  (use-package dumb-jump
    :bind
    (:map prog-mode-map
          (("C-c C-o" . dumb-jump-go-other-window)
           ("C-c C-j" . dumb-jump-go)
           ("C-c C-i" . dumb-jump-go-prompt)))
    :custom (dumb-jump-selector 'ivy))
#+end_src

** =iedit=

=iedit= allows you to edit multiple occurrences of a symbol or region.

[[https://www.emacswiki.org/emacs/Iedit][More Information]]

#+begin_src emacs-lisp
  (use-package iedit
    :bind
    ("M-;" . iedit-mode))
#+end_src

** =format-all=

=format-all= let one auto-format source code in many languages using the same command.

[[https://github.com/lassik/emacs-format-all-the-code][More Information]]


#+begin_src emacs-lisp
  (use-package format-all)
#+end_src

** =evil-nerd-commenter=

=evil-nerd-commenter= lets one comment/uncomment lines efficiently. Like Nerd Commenter in VIM

[[https://github.com/redguardtoo/evil-nerd-commenter][More Information]]

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind
    ("C-;" . evilnc-comment-or-uncomment-lines))
#+end_src

** =yasnippets=

#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :init (use-package yasnippet-snippets :after yasnippet)
    :config
    (yas-global-mode 1))
#+end_src

** =flycheck=

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs, intended as replacement for the older Flymake extension which is part of GNU Emacs.

[[https://www.flycheck.org/en/latest/][More Information]]

#+begin_src emacs-lisp
  (use-package flycheck
    :diminish
    :hook
    (prog-mode . flycheck-mode))
#+end_src

** =LSP=
*** =lsp-mode=

 LSP Mode - Language Server Protocol support for Emacs
 Language Server Protocol support with multiples languages support for Emacs

 [[https://emacs-lsp.github.io/lsp-mode/][More Information]]

 #+begin_src emacs-lisp
   (use-package lsp-mode
     :hook ((python-mode . lsp)
            (lsp-mode . lsp-enable-which-key-integration))
     :config
     ;; debug info
     (setq lsp-print-io t)
     (setq lsp-print-performance t)
     ;; general
     (setq lsp-keymap-prefix "s-l")                         ;; set keymap
     (setq lsp-prefer-capf t)                               ;; use company-capf - recommended over company-lsp
     (setq lsp-keep-workspace-alive nil)                    ;; close workspace when no files
     (setq lsp-enable-snippet t)                            ;; enable snippet completion
     (setq lsp-auto-guess-root nil)                         ;; set project files manually
     (setq lsp-restart 'auto-restart)                       ;; restart if server exits
     (setq lsp-document-sync-method nil)                    ;; use default method recommended by server. 'incremental 'full
     (setq lsp-response-timeout 10)                         ;; default timeout val
     (setq lsp-auto-configure t)                            ;; let lsp-mode autoconfigure company etc
     (setq lsp-enable-completion-at-point t)                ;; enable completion-at-point
     (setq lsp-diagnostic-package :flycheck)                ;; use flycheck for syntax highlighting
     (setq lsp-enable-indentation t)                        ;; indent regions based on lsp
     (setq lsp-signature-auto-activate nil)                 ;; don't display documentation in minibuffer
     (setq read-process-output-max (* 1024 1024))           ;; 1mb
     (setq lsp-idle-delay 0.5))                             ;; lsp refresh rate
 #+end_src

*** =lsp-ui=

 UI integration's for lsp-mode

 [[https://emacs-lsp.github.io/lsp-ui/][More Information]]

 #+begin_src emacs-lisp
   (use-package lsp-ui
     :after lsp-mode
     :diminish
     :commands lsp-ui-mode
     :bind
     ;; lsp-ui-peek
     ((:map lsp-ui-mode-map
           ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
           ([remap xref-find-references] . lsp-ui-peek-find-references)
           ;; lsp-ui-doc
           ("M-i" . lsp-ui-doc-focus-frame))
      ("s-i" . my/toggle-lsp-ui-doc))
     :config
     ;; lsp-ui-sideline
     (setq lsp-ui-sideline-enable t)
     (setq lsp-ui-sideline-ignore-duplicate t)
     (setq lsp-ui-sideline-show-diagnostics t)
     (setq lsp-ui-sideline-show-hover nil)
     (setq lsp-ui-sideline-show-code-actions nil)
     (setq lsp-ui-sideline-show-symbol nil)
     (setq lsp-ui-sideline-delay 0.1)
     ;; lsp-ui-doc
     (setq lsp-ui-doc-enable nil)
     (setq lsp-ui-doc-header t)
     (setq lsp-ui-doc-include-signature t)
     (setq lsp-ui-doc-position 'at-point)
     (setq lsp-ui-doc-delay 0)
     (setq lsp-ui-doc-max-height 50)
     (setq lsp-ui-doc-max-width 200)
     (setq lsp-ui-doc-use-childframe t)
     (setq lsp-ui-doc-use-webkit nil)
     :preface
     (defun my/toggle-lsp-ui-doc ()
       (interactive)
       (if lsp-ui-doc-mode
           (progn
             (lsp-ui-doc-mode -1)
             (lsp-ui-doc--hide-frame))
         (lsp-ui-doc-mode 1)))
     :hook
     (lsp-mode . lsp-ui-mode))
 #+end_src

** =company=
*** =company-mode=

#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :hook
    (after-init . global-company-mode)
    :bind
    ((:map company-active-map
           ("C-n" . company-select-next)
           ("C-p" . company-select-previous))
     (:map company-search-map
           ("C-n" . company-select-next)
           ("C-p" . company-select-previous)))
    :config
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0)
    (setq company-echo-delay 0)
    (setq company-tooltip-idle-delay 0)
    (setq company-tooltip-align-annotations t)
    (setq company-require-match nil)
    (setq company-show-numbers t)
    (global-company-mode 1)
    ;; Don't use company in debugger mode
    (setq company-global-modes '(not gud-mode)))
#+end_src

*** =company-box=

#+begin_src emacs-lisp
  (use-package company-box
    :diminish
    :hook
    (company-mode . company-box-mode)
    :config
    (setq company-box-doc-delay 0)
    (setq company-box-enable-icon t)
    (setq company-box-color-icons nil)
    (setq company-box-max-candidates 10)
    (setq company-box-show-single-candidate t)
    ;; all-the-icons-integration
    (setq company-box-icons-all-the-icons
        `((Unknown . ,(all-the-icons-faicon "cog" :height 0.85 :v-adjust -0.02))
          (Text . ,(all-the-icons-octicon "file-text" :height 0.85))
          (Method . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.02))
          (Function . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.02))
          (Constructor . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.02))
          (Field . ,(all-the-icons-material "loyalty" :height 0.85 :v-adjust -0.2))
          (Variable . ,(all-the-icons-material "loyalty" :height 0.85 :v-adjust -0.2))
          (Class . ,(all-the-icons-faicon "cogs" :height 0.85 :v-adjust -0.02))
          (Interface . ,(all-the-icons-material "control_point_duplicate" :height 0.85 :v-adjust -0.02))
          (Module . ,(all-the-icons-alltheicon "less" :height 0.85 :v-adjust -0.05))
          (Property . ,(all-the-icons-faicon "wrench" :height 0.85))
          (Unit . ,(all-the-icons-material "streetview" :height 0.85))
          (Value . ,(all-the-icons-faicon "tag" :height 0.85 :v-adjust -0.2))
          (Enum . ,(all-the-icons-material "library_books" :height 0.85))
          (Keyword . ,(all-the-icons-material "functions" :height 0.85))
          (Snippet . ,(all-the-icons-material "content_paste" :height 0.85))
          (Color . ,(all-the-icons-material "palette" :height 0.85))
          (File . ,(all-the-icons-faicon "file" :height 0.85))
          (Reference . ,(all-the-icons-faicon "cog" :height 0.85 :v-adjust -0.02))
          (Folder . ,(all-the-icons-faicon "folder" :height 0.85))
          (EnumMember . ,(all-the-icons-material "collections_bookmark" :height 0.85))
          (Constant . ,(all-the-icons-material "class" :height 0.85))
          (Struct . ,(all-the-icons-faicon "cogs" :height 0.85 :v-adjust -0.02))
          (Event . ,(all-the-icons-faicon "bolt" :height 0.85))
          (Operator . ,(all-the-icons-material "streetview" :height 0.85))
          (TypeParameter . ,(all-the-icons-faicon "cogs" :height 0.85 :v-adjust -0.02))
          (Template . ,(all-the-icons-material "settings_ethernet" :height 0.9)))
        company-box-icons-alist 'company-box-icons-all-the-icons))
#+end_src

* Python
** LSP Python MS

=lsp-mode= client leveraging the Microsoft's [[https://github.com/Microsoft/python-language-server][python-language-server]].

[[https://emacs-lsp.github.io/lsp-python-ms/][Installation and More Information]]


#+begin_src emacs-lisp
  (use-package lsp-python-ms
    :diminish
    :init
    (setq lsp-python-ms-auto-install-server t)
    :config
    (setq lsp-python-ms-executable
        "~/.emacs.d/site-elisp/python-language-server/output/bin/Release/osx-x64/publish/Microsoft.Python.LanguageServer"))
#+end_src

** =conda=

This package lets you activate your conda environments. The setup works for miniconda installed by hombre.

[[https://github.com/necaris/conda.el][More Information]]

Usage:
- ~M-x conda-env-activate~
- ~M-x conda-env-deactivate~

#+begin_src emacs-lisp
  (use-package conda
    :init
    (setq conda-anaconda-home "/opt/miniconda3/")
    :config
    (conda-env-initialize-interactive-shells) ;; interactive shell support
    (conda-env-initialize-eshell)             ;; eshell support
    (conda-env-autoactivate-mode t))          ;; autoactivate
#+end_src

* Appearance
** Icons
*** =all-the-icons=

 All The Icons, a utility package to collect various Icon Fonts. Enable only in GUI Emacs.

 [[https://github.com/domtronn/all-the-icons.el][More Information]]

 #+begin_src emacs-lisp
   (use-package all-the-icons)
 #+end_src

*** =all-the-icons-ivy=

  #+begin_src emacs-lisp
    (use-package all-the-icons-ivy-rich
      :config
      (all-the-icons-ivy-rich-mode 1))

    (use-package ivy-rich
      :config
      (ivy-rich-mode 1)
      (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
  #+end_src

*** =all-the-icons-dired=

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :diminish
    :custom-face
    (all-the-icons-dired-dir-face ((t (:foreground nil))))
    :hook
    (dired-mode . all-the-icons-dired-mode))
#+end_src

*** =mode-icons=

#+begin_src emacs-lisp
  (use-package mode-icons
    :config
    (mode-icons-mode))
#+end_src

** Themes
*** Doom Theme

Doom Themes, an UI plugin and pack of themes

[[https://github.com/hlissner/emacs-doom-themes][More Information]]

#+begin_src emacs-lisp
  (use-package doom-themes
    :custom-face
    (cursor ((t (:background "BlanchedAlmond"))))
    :config
    (doom-themes-visual-bell-config)  ;; flashing mode-line on errors
    (doom-themes-org-config)          ;; Corrects (and improves) org-mode's native fontification.
    (load-theme 'doom-gruvbox t))
#+end_src

*** Doom Modeline

Doom Modeline, a modeline from DOOM Emacs, but more powerful and faster.

[[https://github.com/seagle0128/doom-modeline][More Information]]

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    :config
    (setq inhibit-compacting-font-caches t)
    (setq doom-modeline-minor-modes t)
    (setq doom-modeline-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-height 15))
#+end_src

*** Other Themes

#+begin_src emacs-lisp
  ;;(use-package solarized-theme)
  ;;(use-package darktooth-theme)
  ;;(use-package kaolin-themes)
  ;; (use-package gruvbox-theme
    ;; :config
    ;; (load-theme 'gruvbox))
#+end_src

** =beacon=

[[https://github.com/Malabarba/beacon][More Information]]

#+begin_src emacs-lisp
  (use-package beacon
    :config
    (beacon-mode 1)
    (setq beacon-color "#39FF14"))
#+end_src

** =rainbow-delimiters=

[[https://github.com/Fanael/rainbow-delimiters][More Information]]

#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook
      (prog-mode . rainbow-delimiters-mode))
#+end_src

** =dimmer.el=

[[https://github.com/gonewest818/dimmer.el][More Information]]

#+begin_src emacs-lisp
  (use-package dimmer
    :config
    (setq dimmer-fraction 0.5)
    (dimmer-mode t))
#+end_src

* Latex

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    ;; (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t))

  (use-package auctex-latexmk
    :config
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t))

  (use-package reftex
    :diminish
    :config
    (setq reftex-cite-prompt-optional-args t)) ;; Prompt for empty optional arguments in cite

  (use-package company-auctex
    :init
    (company-auctex-init))

  (use-package cdlatex)

  (use-package tex
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config (progn
              (setq TeX-source-correlate-mode t)
              (setq TeX-source-correlate-method 'synctex)
              (setq TeX-auto-save t)
              (setq TeX-parse-self t)
              (setq-default TeX-master nil)
              (setq reftex-plug-into-AUCTeX t)
              (pdf-tools-install)
              (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
                    TeX-source-correlate-start-server t)
              ;; Update PDF buffers after successful LaTeX runs
              (add-hook 'TeX-after-compilation-finished-functions
                        #'TeX-revert-document-buffer)
              (add-hook 'LaTeX-mode-hook
                        (lambda ()
                          (reftex-mode t)))))
#+end_src

* Org-Mode
** =org-mode=

Install org-mode from the org package repository.

[[https://orgmode.org/][More Information]]

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :hook
    ((after-save . my/tangle-emacs-config)
     (org-mode . turn-on-org-cdlatex))
    :config
    ;; Tangle on saving this file
    (defun my/tangle-emacs-config ()
      "If the current file is this file, the code blocks are tangled"
      (when (equal (buffer-file-name) (expand-file-name "~/.emacs.d/my-literate-emacs-configuration.org"))
        (org-babel-tangle nil "~/.emacs.d/init.el")))
    (setq org-special-ctrl-a/e t)
    (setq org-src-window-setup 'split-window-below)
    ;; ;; edit block inserts
    (setq org-structure-template-alist
    '(("a" . "export ascii\n")
      ("c" . "center\n")
      ("C" . "comment\n")
      ("e" . "src emacs-lisp\n")
      ("E" . "export")
      ("h" . "export html\n")
      ("l" . "export latex\n")
      ("q" . "quote\n")
      ("s" . "src")
      ("v" . "verse\n"))))
#+end_src

** =toc-org=

Install the =toc-org= package to automatically generate an updated table of contents.

[[https://github.com/snosov1/toc-org][More Information]]

#+begin_src emacs-lisp
  (use-package toc-org
    :after org
    :hook
    (org-mode . toc-org-enable))
#+end_src

** =org-bullets=

[[https://github.com/sabof/org-bullets][More Information]]

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook
    (org-mode . (lambda () (org-bullets-mode t))))
 #+end_src

** =reveal.js=

Install reveal.js from [[https://github.com/hakimel/reveal.js/][here]]. Then, install [[https://github.com/hexmode/ox-reveal][=ox-reveal=]] and [[https://github.com/hniksic/emacs-htmlize][=htmlize=]].

[[https://github.com/hexmode/ox-reveal][More Information]]

#+begin_src emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal
    :config
    (setq org-reveal-root "/Users/simenojensen/.emacs.d/site-elisp/reveal.js/")
    (setq org-reveal-mathjax t))
#+end_src

** =htmlize=

[[https://github.com/hniksic/emacs-htmlize][More Information]]

#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

* Elisp Functions
** Edit Configuration File

#+begin_src emacs-lisp
  (defun my/edit-config ()
    "Opens the my-literate-emacs-configuration.org file."
    (interactive)
    (find-file "~/.emacs.d/my-literate-emacs-configuration.org"))
#+end_src

* Internet
** =google-this=

[[http://pragmaticemacs.com/emacs/google-search-from-inside-emacs/][More Information]]

#+begin_src emacs-lisp
  (use-package google-this
    :diminish
    :config
    (google-this-mode t))
#+end_src

** =engine-mode=

#+begin_src emacs-lisp
  (use-package engine-mode
    :config
    (engine-mode t)
    (defengine google
      "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
      :keybinding "g")
    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s")
    (defengine google-maps
      "http://maps.google.com/maps?q=%s"
      :docstring "Mappin' it up.")
    (defengine youtube
      "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
      :keybinding "y"))
#+end_src

* Experimental

#+begin_src emacs-lisp

#+end_src
