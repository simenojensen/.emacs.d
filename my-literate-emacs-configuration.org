#+TITLE: My Literate Emacs Configuration
#+AUTHOR: Simen Omholt-Jensen
#+STARTUP:     hideall hidestars
#+PROPERTY:     header-args:emacs-lisp     :tangle "~/.emacs.d/init.el"

* Start up
** Lexical Binding

#+BEGIN_QUOTE
Until Emacs 24.1 (June 2012), Elisp only had dynamically scoped variables, a feature, mostly by accident, common to old lisp dialects. While dynamic scope has some selective uses, it’s widely regarded as a mistake for local variables, and virtually no other languages have adopted it.
#+END_QUOTE

[[https://nullprogram.com/blog/2016/12/22/][More Information]]

#+BEGIN_SRC emacs-lisp
;;; init.el --- -*- lexical-binding: t -*-
#+END_SRC
** Avoid Garbage Collection at Startup

#+BEGIN_QUOTE
The GC can easily double startup time, so we suppress it at startup by turning up =gc-cons-threshold= (and perhaps =gc-cons-percentage=) temporarily:
#+END_QUOTE

[[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][More Information]]

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
        gc-cons-percentage 0.6)
#+END_SRC

** Benchmarking

First, declare a hook which will benchmark the startup process. It reports how long the it took to start up, and how many garbage collections were performed.

[[https://blog.d46.us/advanced-emacs-startup/][More Information]]

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+END_SRC

** Unset =file-name-handler-alist=

Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it won’t need any of them.

#+BEGIN_SRC emacs-lisp
  (defvar file-name-handler-alist-original file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+END_SRC

** Define Constants

#+BEGIN_SRC emacs-lisp
  (defconst *sys/gui*
    (display-graphic-p)
    "Are we running on a GUI Emacs?")
#+END_SRC

* Garbage Collection
** Set =gc-cons-threshold= Smaller for Interactive Use

A large =gc-cons-threshold= may cause freezing and stuttering during long-term interactive use. If you experience freezing, decrease this amount, if you increase stuttering, increase this amount.

#+BEGIN_SRC emacs-lisp
  (defvar better-gc-cons-threshold 67108864 ; 64mb
    "The default value to use for `gc-cons-threshold'.

  If you experience freezing, decrease this.  If you experience stuttering, increase this.")

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold better-gc-cons-threshold)
              (setq file-name-handler-alist file-name-handler-alist-original)
              (makunbound 'file-name-handler-alist-original)))
#+END_SRC

Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (if (boundp 'after-focus-change-function)
                  (add-function :after after-focus-change-function
                                (lambda ()
                                  (unless (frame-focus-state)
                                    (garbage-collect))))
                (add-hook 'after-focus-change-function 'garbage-collect))
              (defun gc-minibuffer-setup-hook ()
                (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

              (defun gc-minibuffer-exit-hook ()
                (garbage-collect)
                (setq gc-cons-threshold better-gc-cons-threshold))

              (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
              (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+END_SRC

* Package Management
** =package.el=

By default, Emacs 24 or later comes with a built-in package management system (=package.el=). To add further functionality such as adding package repositories and tweaking package configurations, =package.el= needs to be loaded in the =init.el= file during startup.

[[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Package-Installation][More Information]]

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

** Package Repositories
*** ELPA/MELPA

By default, Emacs comes with the Emacs Lisp Package Archive (ELPA). As the packages need to be FSF-sanctioned, there aren't that many to choose from. By adding the Milkypostman's Emacs Lisp Package Archive ([[https://melpa.org/][MELPA]]), an enormous amount of packages become available. Remember to add ~https~ to urls.

#+BEGIN_SRC emacs-lisp
  (setq-default package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                                   ("melpa" . "https://melpa.org/packages/")
                                   ("org" . "https://orgmode.org/elpa/")))
#+END_SRC

*** Other Packages

Add packages contained in =site-elisp/= to =load-path=.

**** Add Packages Manually from Git

#+BEGIN_SRC shell :tangle no
  cd site-elisp/
  git submodule add https://github.com/foo/bar.git
#+END_SRC

**** Update Manually Added Packages

#+BEGIN_SRC shell :tangle no
  git submodule init
  git submodule update
#+END_SRC

** Prepare Packages for Configuration

- Run =package-initialize= to set up the load-paths and autoloads for installed packages.

[[https://www.emacswiki.org/emacs/InstallingPackages][More Information]]

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC

- Set =package-enable-at-startup= to =nil= to prevent superfluous loading of packages.

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Installation.html][More Information]]

#+BEGIN_SRC emacs-lisp
  (setq-default package-enable-at-startup nil)
#+END_SRC

** Bootstrap =use-package=

- The =use-package= macro allows cleaner configuration of package loading and installation.

[[https://github.com/jwiegley/use-package][More Information]]

#+BEGIN_SRC emacs-lisp
  (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
#+END_SRC

- By setting =use-package-always-ensure= to =t=, =use-package= will install packages that are not already installed.

[[https://github.com/jwiegley/use-package#package-installation][More Information]]

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

** Automatically Update Packages with =auto-package-update=.

[[https://github.com/rranelli/auto-package-update.el][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :config
    (setq-default auto-package-update-interval 7) ;; in days
    (setq-default auto-package-update-delete-old-versions t)
    (setq-default auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC

** Prefer Newer =.el= Files Over Older =.elc= Files.

#+BEGIN_SRC emacs-lisp
  (setq-default load-prefer-newer t)
#+END_SRC

** Automatically Compile Packages During Startup.

[[https://github.com/emacscollective/auto-compile][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config
    (auto-compile-on-load-mode)
  (auto-compile-on-save-mode))
#+END_SRC

** =bind-key=

To use with =use-package=.

#+BEGIN_SRC emacs-lisp
  (require 'bind-key)
#+END_SRC

** =diminish=

The =diminish= package makes it possible to remove clutter from the modeline. The =:diminish= keyword in the =use-package= declarations signify =diminish= invocation.

[[https://github.com/myrjola/diminish.el][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package diminish)
#+END_SRC

** =try=

The =try= package let's you try new packages without installed them. On the next restart of Emacs, they are not loaded.

[[https://github.com/larstvei/Try][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package try)
#+END_SRC

* Global Functionalities
** User Information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Simen Omholt-Jensen")
  (setq user-mail-address "simen@omholt-jensen.com")
#+END_SRC
** Convenient Default Settings

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '(:eval (if (buffer-file-name) (abbreviate-file-name (buffer-file-name)) "%b")))
  ;; (setq-default frame-title-format (list "[" user-login-name "@" (system-name) "] %b"))   ;; Set frame title to [user@hostname]*BufferName*
  (global-display-line-numbers-mode)                                                      ;; Display line numbers
  (setq column-number-mode t)                                                             ;; Display column numbers
  (setq-default inhibit-startup-screen t)                                                 ;; Don't show the startup message
  (setq-default initial-scratch-message nil)                                              ;; Set initial scratch message to nil
  (setq debug-on-error nil)                                                                 ;; Receive more information errors
  (setq custom-file "~/.emacs.d/custom.el")
  (ignore-errors (load custom-file))                                                      ;; Load custom.el if it exists
  (setq-default create-lockfiles nil)                                                     ;; Disable lock files
  (setq-default backup-directory-alist '(("." . "/Users/simenojensen/.emacs.d/backups"))) ;; Save backup files
  (setq-default indent-tabs-mode nil)                                                     ;; Don't use hard tabs
  (setq echo-keystrokes 0.1)                                                              ;; Echo keystrokes fast
  (fset 'yes-or-no-p 'y-or-n-p)                                                           ;; y-or-n instead of yes-or-no
  (add-hook 'before-save-hook 'delete-trailing-whitespace)                                ;; Delete trailing whitespace on save
  (setq require-final-newline t)                                                          ;; Add a newline at end of file on save
  (global-auto-revert-mode t)                                                             ;; Automatically update buffers if a file content has changed on disk
  (save-place-mode t)                                                                     ;; Save position of the point in file
  (global-hl-line-mode t)                                                                 ;; Highlight the line with the point
  (add-hook 'before-save-hook 'time-stamp)                                                ;; Update timestamp of 8 first lines on save
  (setq large-file-warning-threshold 100000000)                                           ;; Warn when opening file larger than 100 MB
#+END_SRC

** Smooth Scrolling

Configurations for smooth scrolling

#+BEGIN_SRC emacs-lisp
  ;; Vertical Scroll
  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 101)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq auto-window-vscroll nil)
  (setq fast-but-imprecise-scrolling nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)
  ;; Horizontal Scroll
  (setq hscroll-step 1)
  (setq hscroll-margin 1)
#+END_SRC

** Disable GUIs

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)                         ;; Disable menu bar
  (tool-bar-mode -1)                         ;; Disable tool bar
  (scroll-bar-mode -1)                       ;; Disable scroll bar
  (blink-cursor-mode -1)                     ;; Disable blinking cursor
  (setq-default ring-bell-function 'ignore)  ;; Disable bell function
#+END_SRC

** Killing Emacs

#+BEGIN_SRC emacs-lisp
  (setq-default confirm-kill-emacs nil)        ;; Do not confirm when killing Emacs
  (setq-default confirm-kill-processes nil)    ;; do not confirm when killing processes before killing Emacs
#+END_SRC

* Keybindings
** which-key

The =which-key= package automatically displays potential command information as command keys are typed. This makes it easy to explore Emacs functionality.
[[https://github.com/justbur/emacs-which-key][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5)
    (which-key-mode))
#+END_SRC

** =bind-key=
*** Window Adjustment
#+BEGIN_SRC emacs-lisp
  (bind-key "s-<left>" 'shrink-window-horizontally)
  (bind-key "s-<right>" 'enlarge-window-horizontally)
  (bind-key "s-<down>" 'shrink-window)
  (bind-key "s-<up>" 'enlarge-window)
#+END_SRC

*** Truncate Lines
#+BEGIN_SRC emacs-lisp
  (bind-key "C-x C-l" 'toggle-truncate-lines)
#+END_SRC

*** Motion
#+BEGIN_SRC emacs-lisp
  (bind-key "M-p" 'backward-paragraph)
  (bind-key "M-n" 'forward-paragraph)
  (bind-key "M-g" 'goto-line)
#+END_SRC

*** ibuffer
#+BEGIN_SRC emacs-lisp
  (bind-key "C-x b" 'ibuffer)
#+END_SRC

* Interface Enhancement
** =crux=

=crux= is Collection of Ridiculously Useful eXtensions for Emacs.
[[https://github.com/bbatsov/crux][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package crux
    :bind
    ("C-a" . crux-move-beginning-of-line)
    :config
    (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+END_SRC

** =Ivy= / =Counsel= / =Swiper= / =amx=

=Ivy= is an interactive interface for completion in Emacs.
[[https://oremacs.com/swiper/][More Information]]
=amx= prioritizes your most used commands
[[https://github.com/DarwinAwardWinner/amx][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :init
    (use-package amx :defer t)
    (use-package counsel :diminish :config (counsel-mode 1))
    (use-package swiper :defer t)
    (ivy-mode 1)
    :bind
    (("C-x C-f" . counsel-find-file)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable)
    ("C-h l" . counsel-find-library)
    ("C-h i" . counsel-info-lookup-symbol)
    ("C-h u" . counsel-unicode-char)
    ("M-x" . counsel-M-x)
    ("M-v" . counsel-yank-pop)
    ("C-x C-b" . ivy-switch-buffer)
    ("C-s" . swiper-isearch))
    :config
    (ivy-mode 1)
    (setq ivy-height 10)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-display-style 'fancy)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
#+END_SRC
** =undo-tree=

=undo-tree=, a feature that provides a visualization of the undos in a file.
[[https://www.emacswiki.org/emacs/UndoTree][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode)
  :config
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-visualizer-timestamps t))
#+END_SRC

** =color-rg=

=color rg= is a search and refactoring tool based on *ripgrep*.
[[https://github.com/manateelazycat/color-rg][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package color-rg
    :load-path (lambda () (expand-file-name "site-elisp/color-rg" user-emacs-directory))
    :bind
    ("C-M-s" . color-rg-search-input))
#+END_SRC

** =snails=

=snails= is a modern, easy-to-expand fuzzy search framework.
[[https://github.com/manateelazycat/snails][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package snails
    :disabled
    :load-path (lambda () (expand-file-name "site-elisp/snails/" user-emacs-directory))
    :if *sys/gui*
    :custom-face
    (snails-content-buffer-face ((t (:background "#111" :height 110))))
    (snails-input-buffer-face ((t (:background "#222" :foreground "gold" :height 110))))
    (snails-header-line-face ((t (:inherit font-lock-function-name-face :underline t :height 1.1)))))
#+END_SRC

** =Dired=

=Dired= is the built-in directory editor
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :bind
    (("C-x C-j" . dired-jump)
     ("C-x j" . dired-jump-other-window))
    :custom
    ;; Always delete and copy recursively
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    ;; Auto refresh Dired, but be quiet about it
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    ;; Quickly copy/move file in Dired
    (dired-dwim-target t)
    ;; Move files to trash when deleting
    (delete-by-moving-to-trash t)
    ;; Load the newest version of a file
    (load-prefer-newer t)
    ;; Detect external file changes and auto refresh file
    (auto-revert-use-notify nil)
    (auto-revert-interval 3) ; Auto revert every 3 sec
    :config
    ;; Enable global auto-revert
    (global-auto-revert-mode t)
    ;; Reuse same dired buffer, to prevent numerous buffers while navigating in dired
    (put 'dired-find-alternate-file 'disabled nil)
    :hook
    (dired-mode . (lambda ()
                    (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)
                    (local-set-key (kbd "RET") #'dired-find-alternate-file)
                    (local-set-key (kbd "^")
                                   (lambda () (interactive) (find-alternate-file ".."))))))
#+END_SRC

** =disk-usage=

=disk-usage= is a file system analyzer that offers a tabulated view of file listings sorted by size.
[[https://gitlab.com/ambrevar/emacs-disk-usage][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package disk-usage :commands (disk-usage))
#+END_SRC

* Navigation
** =ace-window=

=ace-window= offers fast window navigation with [[https://github.com/zamansky/using-emacs/blob/master/myinit.org#ace-windows-for-easy-window-switching][customizable]] prompts.

[[https://github.com/abo-abo/ace-window][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind
    ("C-x C-o" . ace-window)
    ("C-x o" . ace-window)
    :init
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+END_SRC

** =winner-mode=

Built-in =winner-mode= for remembering previous window actions.

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

* OS Specific Settings

Detect which OS Emacs is being run on, and configure keybindings accordingly.

#+BEGIN_SRC emacs-lisp
  (cond
#+END_SRC

** macOS

#+BEGIN_SRC emacs-lisp
  ((eq system-type 'darwin)
#+END_SRC

By setting the ~M~ to ~⌘~, ~A~ to ~^~ (left option)  and ~S~ to ~^~ (right option), we can emulate some of the macOS keyboard configurations.

#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'mac-command-modifier 'meta)
  (customize-set-variable 'mac-option-modifier 'alt)
  (customize-set-variable 'mac-right-command-modifier 'super)
#+END_SRC

Next, we are binding ~M-=~ to increase the font size, and ~M--~ to decrease the font size.

#+BEGIN_SRC emacs-lisp
  (bind-key "M-=" 'text-scale-increase)
  (bind-key "M--" 'text-scale-decrease)
#+END_SRC

Lastly, we make sure the =$PATH= is loaded from the default shell.

[[https://github.com/purcell/exec-path-from-shell][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :defer nil
    :config
    (setq exec-path-from-shell-variables  '("PATH" "MANPATH" "AIRTABLE_API_KEY" "TSI_ENVIRONMENT" "TSI_TENANT_ID" "TSI_CLIENT_ID" "TSI_CLIENT_SECRET" "TSI_APPLICATION_NAME" "VIRTUAL_ENV" "LANG" "LC_ALL" "LC_CTYPE"))
    (exec-path-from-shell-initialize))
  ) ;; closing parenthesis
#+END_SRC

** Windows

Not implemented.

#+BEGIN_SRC emacs-lisp
  ((eq system-type 'windows-nt))
#+END_SRC

** Linux

Not Implemented

#+BEGIN_SRC emacs-lisp
  ((eq system-type 'gnu/linux))
 )
#+END_SRC
* Console

Aweshell extends the eshell
[[https://github.com/manateelazycat/aweshell][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package aweshell
    :disabled
    :load-path (lambda () (expand-file-name "site-elisp/aweshell" user-emacs-directory))
    :commands (aweshell-new aweshell-dedicated-open)
    :bind
    (("s-!" . aweshell-dedicated-open)
     (:map eshell-mode-map ("s-!" . aweshell-dedicated-close))))
#+END_SRC

* General Programming
** Magit

Magit is an interface to the version control system Git, implemented as an Emacs package. Magit aspires to be a complete Git porcelain.
[[https://magit.vc/][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status))
#+END_SRC

** Projectile

Projectile is a project interaction library for Emacs.
[[https://docs.projectile.mx/projectile/index.html][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (setq projectile-completion-system 'ivy)
    (projectile-mode +1))
#+END_SRC

** =treemacs=

=treemacs= is a file and project explorer similar to NeoTree or vim’s NerdTree, but largely inspired by the Project Explorer in Eclipse.
[[https://github.com/Alexander-Miller/treemacs][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :custom
    (treemacs-collapse-dirs 3)
    (treemacs-deferred-git-apply-delay 0.5)
    (treemacs-display-in-side-window t)
    (treemacs-file-event-delay 5000)
    (treemacs-file-follow-delay 0.2)
    (treemacs-follow-after-init t)
    (treemacs-follow-recenter-distance 0.1)
    (treemacs-git-command-pipe "")
    (treemacs-goto-tag-strategy 'refetch-index)
    (treemacs-indentation 2)
    (treemacs-indentation-string " ")
    (treemacs-is-never-other-window nil)
    (treemacs-max-git-entries 5000)
    (treemacs-no-png-images nil)
    (treemacs-no-delete-other-windows t)
    (treemacs-project-follow-cleanup nil)
    (treemacs-persist-file (expand-file-name ".cache/treemacs-persist" user-emacs-directory))
    (treemacs-recenter-after-file-follow nil)
    (treemacs-recenter-after-tag-follow nil)
    (treemacs-show-cursor nil)
    (treemacs-show-hidden-files t)
    (treemacs-silent-filewatch nil)
    (treemacs-silent-refresh nil)
    (treemacs-sorting 'alphabetic-desc)
    (treemacs-space-between-root-nodes t)
    (treemacs-tag-follow-cleanup t)
    (treemacs-tag-follow-delay 1.5)
    (treemacs-width 50)
    :config
    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    :bind
    (("M-0"       . treemacs-select-window)
     (:map treemacs-mode-map ("C-p" . treemacs-previous-line))
     (:map treemacs-mode-map ("C-n" . treemacs-next-line))))
#+END_SRC

*** Treemacs Magit

#+BEGIN_SRC emacs-lisp
  (use-package treemacs-evil
    :after treemacs evil)
#+END_SRC

*** Treemacs Projectile

#+BEGIN_SRC emacs-lisp
  (use-package treemacs-projectile
    :after treemacs projectile)
#+END_SRC

*** Treemacs Icons Dired

#+BEGIN_SRC emacs-lisp
  (use-package treemacs-icons-dired
    :after treemacs dired
    :config
    (treemacs-icons-dired-mode))
#+END_SRC

** YASnippet

YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates.
[[http://joaotavora.github.io/yasnippet/][More Information]]

Setup also loads =YASnippets Snippets=, a collection of code snippets for many languages.
[[https://github.com/AndreaCrotti/yasnippet-snippets][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    (use-package yasnippet-snippets :after yasnippet)
    :hook ((prog-mode LaTeX-mode org-mode) . yas-minor-mode)
    :bind
    (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
    (:map yas-keymap
          (("TAB" . smarter-yas-expand-next-field)
           ([(tab)] . smarter-yas-expand-next-field)))
    :config
    (yas-reload-all)
    (defun smarter-yas-expand-next-field ()
      "Try to `yas-expand' then `yas-next-field' at current cursor position."
      (interactive)
      (let ((old-point (point))
            (old-tick (buffer-chars-modified-tick)))
        (yas-expand)
        (when (and (eq old-point (point))
                   (eq old-tick (buffer-chars-modified-tick)))
          (ignore-errors (yas-next-field))))))
#+END_SRC

** Flycheck

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs, intended as replacement for the older Flymake extension which is part of GNU Emacs.
[[https://www.flycheck.org/en/latest/][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer t
    :diminish
    :hook ((prog-mode markdown-mode) . flycheck-mode)
    :custom
    (flycheck-global-modes
     '(not text-mode outline-mode fundamental-mode org-mode
           diff-mode shell-mode eshell-mode term-mode))
    (flycheck-emacs-lisp-load-path 'inherit)
    (flycheck-indication-mode 'right-fringe)
    :init
    (use-package flycheck-grammarly :defer t)
    (use-package flycheck-posframe
      :custom-face (flycheck-posframe-border-face ((t (:inherit default))))
      :hook (flycheck-mode . flycheck-posframe-mode)
      :custom
      (flycheck-posframe-border-width 1)
      (flycheck-(point)osframe-inhibit-functions
                '((lambda (&rest _) (bound-and-true-p company-backend)))))
    (use-package flycheck-pos-tip
      :defines flycheck-pos-tip-timeout
      :hook (flycheck-mode . flycheck-pos-tip-mode)
      :custom (flycheck-pos-tip-timeout 30))
    :config
    (when (fboundp 'define-fringe-bitmap)
      (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
        [16 48 112 240 112 48 16] nil nil 'center))
    (flycheck-add-mode 'javascript-eslint 'js-mode)
    (flycheck-add-mode 'typescript-tslint 'rjsx-mode))
#+END_SRC

** Dump Jump

An Emacs "jump to definition" package for 40+ languages
[[https://github.com/jacktasia/dumb-jump][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind
    (:map prog-mode-map
          (("C-c C-o" . dumb-jump-go-other-window)
           ("C-c C-j" . dumb-jump-go)
           ("C-c C-i" . dumb-jump-go-prompt)))
    :custom (dumb-jump-selector 'ivy))
#+END_SRC

** Parenthesis
*** Smartparens

Minor mode for Emacs that deals with parens pairs and tries to be smart about it.
[[https://github.com/Fuco1/smartparens][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :diminish smartparens-mode
    :bind
    (:map smartparens-mode-map
          ("C-M-f" . sp-forward-sexp)
          ("C-M-b" . sp-backward-sexp)
          ("C-M-a" . sp-backward-down-sexp)
          ("C-M-e" . sp-up-sexp)
          ("C-M-w" . sp-copy-sexp)
          ("C-M-k" . sp-change-enclosing)
          ("M-k" . sp-kill-sexp)
          ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
          ("C-S-<backspace>" . sp-splice-sexp-killing-around)
          ("C-]" . sp-select-next-thing-exchange))
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    ;; Stop pairing single quotes in elisp
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'org-mode "[" nil :actions nil))
#+END_SRC

*** Match Parenthesis

Match and automatically pair parenthesis, and show parenthesis even when it went offscreen from Clemens Radermacher.
[[https://with-emacs.com/posts/ui-hacks/show-matching-lines-when-parentheses-go-off-screen/][More Information]]

#+BEGIN_SRC emacs-lisp
  ;; Show matching parenthesis
  (show-paren-mode 1)
  ;; we will call `blink-matching-open` ourselves...
  (remove-hook 'post-self-insert-hook
               #'blink-paren-post-self-insert-function)

  ;; this still needs to be set for `blink-matching-open` to work
  (setq blink-matching-paren 'show)
  (let ((ov nil)) ; keep track of the overlay
    (advice-add
     #'show-paren-function
     :after
      (defun show-paren--off-screen+ (&rest _args)
        "Display matching line for off-screen paren."
        (when (overlayp ov)
          (delete-overlay ov))
        ;; check if it's appropriate to show match info,
        ;; see `blink-paren-post-self-insert-function'
        (when (and (overlay-buffer show-paren--overlay)
                   (not (or cursor-in-echo-area
                            executing-kbd-macro
                            noninteractive
                            (minibufferp)
                            this-command))
                   (and (not (bobp))
                        (memq (char-syntax (char-before)) '(?\) ?\$)))
                   (= 1 (logand 1 (- (point)
                                     (save-excursion
                                       (forward-char -1)
                                       (skip-syntax-backward "/\\")
                                       (point))))))
          ;; rebind `minibuffer-message' called by
          ;; `blink-matching-open' to handle the overlay display
          (cl-letf (((symbol-function #'minibuffer-message)
                     (lambda (msg &rest args)
                       (let ((msg (apply #'format-message msg args)))
                         (setq ov (display-line-overlay+
                                   (window-start) msg))))))
            (blink-matching-open))))))
#+END_SRC

** =iedit=

=iedit= allows you to edit multiple occurrences of a symbol or region.

[[https://www.emacswiki.org/emacs/Iedit][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :bind
    ("M-;" . iedit-mode))
#+END_SRC

** LSP

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :defer t
    :commands lsp
    :custom
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
    (lsp-file-watch-threshold 2000)
    (read-process-output-max (* 1024 1024))
    (lsp-eldoc-hook nil)
    :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
    :hook ((java-mode python-mode go-mode
            js-mode js2-mode typescript-mode web-mode
            c-mode c++-mode objc-mode) . lsp))

  ;; (add-hook 'gud-mode-hook 'lsp-workspace-shutdown)
#+END_SRC

** LSP UI

#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :after lsp-mode
    :diminish
    :commands lsp-ui-mode
    :custom-face
    (lsp-ui-doc-background ((t (:background nil))))
    (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
    :bind (:map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references)
                ("C-c u" . lsp-ui-imenu)
                ("M-i" . lsp-ui-doc-focus-frame))
    :custom
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions nil)
    :config
    (setq lsp-ui-doc-use-webkit t)
    ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
    ;; https://github.com/emacs-lsp/lsp-ui/issues/243
    (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
      (setq mode-line-format nil)))
#+END_SRC

** Company Mode

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook ((prog-mode LaTeX-mode latex-mode ess-r-mode) . company-mode)
    :bind
    (:map company-active-map
          ([tab] . smarter-yas-expand-next-field-complete)
          ("TAB" . smarter-yas-expand-next-field-complete))
    :custom
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t)
    (company-begin-commands '(self-insert-command))
    (company-require-match 'never)
    ;; Don't use company in the following modes
    (company-global-modes '(not shell-mode eaf-mode))
    ;; Trigger completion immediately.
    (company-idle-delay 0.1)
    ;; Number the candidates (use M-1, M-2 etc to select completions).
    (company-show-numbers t)
    :config
    (global-company-mode 1)
    (defun smarter-yas-expand-next-field-complete ()
      "Try to `yas-expand' and `yas-next-field' at current cursor position.

  If failed try to complete the common part with `company-complete-common'"
      (interactive)
      (if yas-minor-mode
          (let ((old-point (point))
                (old-tick (buffer-chars-modified-tick)))
            (yas-expand)
            (when (and (eq old-point (point))
                       (eq old-tick (buffer-chars-modified-tick)))
              (ignore-errors (yas-next-field))
              (when (and (eq old-point (point))
                         (eq old-tick (buffer-chars-modified-tick)))
                (company-complete-common))))
        (company-complete-common))))
#+END_SRC

** Company LSP

#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :defer t
    :custom (company-lsp-cache-candidates 'auto))
#+END_SRC

** Company TabNine

#+BEGIN_SRC emacs-lisp
  (use-package company-tabnine
    :defer 1
    :custom
    (company-tabnine-max-num-results 9)
    :bind
    (("M-q" . company-other-backend)
     ("M-t" . company-tabnine))
    :hook
    (lsp-after-open . (lambda ()
                        (setq company-tabnine-max-num-results 3)
                        (add-to-list 'company-transformers 'company//sort-by-tabnine t)
                        (add-to-list 'company-backends '(company-lsp :with company-tabnine :separate))))
    (kill-emacs . company-tabnine-kill-process)
    :config
    ;; Enable TabNine on default
    (add-to-list 'company-backends #'company-tabnine)

    ;; Integrate company-tabnine with lsp-mode
    (defun company//sort-by-tabnine (candidates)
      (if (or (functionp company-backend)
              (not (and (listp company-backend) (memq 'company-tabnine company-backend))))
          candidates
        (let ((candidates-table (make-hash-table :test #'equal))
              candidates-lsp
              candidates-tabnine)
          (dolist (candidate candidates)
            (if (eq (get-text-property 0 'company-backend candidate)
                    'company-tabnine)
                (unless (gethash candidate candidates-table)
                  (push candidate candidates-tabnine))
              (push candidate candidates-lsp)
              (puthash candidate t candidates-table)))
          (setq candidates-lsp (nreverse candidates-lsp))
          (setq candidates-tabnine (nreverse candidates-tabnine))
          (nconc (seq-take candidates-tabnine 3)
                 (seq-take candidates-lsp 6))))))
#+END_SRC

** Company box

#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :diminish
    :functions (my-company-box--make-line
                my-company-box-icons--elisp)
    :commands (company-box--get-color
               company-box--resolve-colors
               company-box--add-icon
               company-box--apply-color
               company-box--make-line
               company-box-icons--elisp)
    :hook (company-mode . company-box-mode)
    :custom
    (company-box-backends-colors nil)
    (company-box-show-single-candidate t)
    (company-box-max-candidates 50)
    (company-box-doc-delay 0.3)
    :config
    ;; Support `company-common'
    (defun my-company-box--make-line (candidate)
      (-let* (((candidate annotation len-c len-a backend) candidate)
              (color (company-box--get-color backend))
              ((c-color a-color i-color s-color) (company-box--resolve-colors color))
              (icon-string (and company-box--with-icons-p (company-box--add-icon candidate)))
              (candidate-string (concat (propertize (or company-common "") 'face 'company-tooltip-common)
                                        (substring (propertize candidate 'face 'company-box-candidate) (length company-common) nil)))
              (align-string (when annotation
                              (concat " " (and company-tooltip-align-annotations
                                               (propertize " " 'display `(space :align-to (- right-fringe ,(or len-a 0) 1)))))))
              (space company-box--space)
              (icon-p company-box-enable-icon)
              (annotation-string (and annotation (propertize annotation 'face 'company-box-annotation)))
              (line (concat (unless (or (and (= space 2) icon-p) (= space 0))
                              (propertize " " 'display `(space :width ,(if (or (= space 1) (not icon-p)) 1 0.75))))
                            (company-box--apply-color icon-string i-color)
                            (company-box--apply-color candidate-string c-color)
                            align-string
                            (company-box--apply-color annotation-string a-color)))
              (len (length line)))
        (add-text-properties 0 len (list 'company-box--len (+ len-c len-a)
                                         'company-box--color s-color)
                             line)
        line))
    (advice-add #'company-box--make-line :override #'my-company-box--make-line)

    ;; Prettify icons
    (defun my-company-box-icons--elisp (candidate)
      (when (derived-mode-p 'emacs-lisp-mode)
        (let ((sym (intern candidate)))
          (cond ((fboundp sym) 'Function)
                ((featurep sym) 'Module)
                ((facep sym) 'Color)
                ((boundp sym) 'Variable)
                ((symbolp sym) 'Text)
                (t . nil)))))
    (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp)

    (when (require 'all-the-icons nil t)
      (declare-function all-the-icons-faicon 'all-the-icons)
      (declare-function all-the-icons-material 'all-the-icons)
      (declare-function all-the-icons-octicon 'all-the-icons)
      (setq company-box-icons-all-the-icons
            `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.85 :v-adjust -0.2))
              (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.05))
              (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
              (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
              (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
              (Field . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
              (Variable . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
              (Class . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
              (Interface . ,(all-the-icons-material "share" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
              (Module . ,(all-the-icons-material "view_module" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
              (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.05))
              (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.85 :v-adjust -0.2))
              (Value . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
              (Enum . ,(all-the-icons-material "storage" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
              (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.85 :v-adjust -0.2))
              (Snippet . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2))
              (Color . ,(all-the-icons-material "palette" :height 0.85 :v-adjust -0.2))
              (File . ,(all-the-icons-faicon "file-o" :height 0.85 :v-adjust -0.05))
              (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.85 :v-adjust -0.2))
              (Folder . ,(all-the-icons-faicon "folder-open" :height 0.85 :v-adjust -0.05))
              (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
              (Constant . ,(all-the-icons-faicon "square-o" :height 0.85 :v-adjust -0.05))
              (Struct . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
              (Event . ,(all-the-icons-faicon "bolt" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-orange))
              (Operator . ,(all-the-icons-material "control_point" :height 0.85 :v-adjust -0.2))
              (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.05))
              (Template . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2)))
            company-box-icons-alist 'company-box-icons-all-the-icons)))
#+END_SRC

* Python
** LSP Python MS

#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms
    :after lsp-mode python
    :custom
    (lsp-python-executable-cmd "python3"))
#+END_SRC

** =conda=

This package lets you activate your conda environments. The setup works for miniconda installed by homebrew.

[[https://github.com/necaris/conda.el][More Information]]

Usage:
- ~M-x conda-env-activate~
- ~M-x conda-env-deactivate~

#+BEGIN_SRC emacs-lisp
  (use-package conda
    :init
    (setq conda-anaconda-home "/opt/miniconda3/")
    :config
    (conda-env-initialize-interactive-shells) ;; interactive shell support
    (conda-env-initialize-eshell)             ;; eshell support
    (conda-env-autoactivate-mode t))          ;; autoactivate
#+END_SRC

* Appearance
** All the Icons
All The Icons, a utility package to collect various Icon Fonts. Enable only in GUI Emacs.
[[https://github.com/domtronn/all-the-icons.el][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

** Themes
*** Doom Theme

Doom Themes, an UI plugin and pack of themes
[[https://github.com/hlissner/emacs-doom-themes][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :custom-face
    (cursor ((t (:background "BlanchedAlmond"))))
    :config
    (doom-themes-visual-bell-config)  ;; flashing mode-line on errors
    (doom-themes-org-config)          ;; Corrects (and improves) org-mode's native fontification.
    (load-theme 'doom-gruvbox t))
#+END_SRC

*** Doom Modeline

Doom Modeline, a modeline from DOOM Emacs, but more powerful and faster.
[[https://github.com/seagle0128/doom-modeline][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    :config
    (setq inhibit-compacting-font-caches t)
    (setq doom-modeline-minor-modes t)
    (setq doom-modeline-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-height 15))
#+END_SRC

*** Other Themes

#+BEGIN_SRC emacs-lisp
  ;;(use-package solarized-theme)
  ;;(use-package darktooth-theme)
  ;;(use-package kaolin-themes)
  ;; (use-package gruvbox-theme
    ;; :config
    ;; (load-theme 'gruvbox))
#+END_SRC

** =beacon=

[[https://github.com/Malabarba/beacon][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config
    (beacon-mode 1)
    (setq beacon-color "#39FF14"))
#+END_SRC

** =rainbow-delimiters=

[[https://github.com/Fanael/rainbow-delimiters][More Information]]

#+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :hook
      (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** =dimmer.el=

[[https://github.com/gonewest818/dimmer.el][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :config
    (setq dimmer-fraction 0.5)
    (dimmer-mode t))
#+END_SRC
* Org-Mode
** =org-mode=

Install org-mode from the org package repository.

[[https://orgmode.org/][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org
    :config
    (add-to-list 'org-modules 'org-tempo)) ;; add "<s <TAB>" for code block completion
#+END_SRC

** =toc-org=

Install the =toc-org= package to automatically generate an updated table of contents.

[[https://github.com/snosov1/toc-org][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :after org
    :hook
    (org-mode . toc-org-enable))
#+END_SRC

** =org-bullets=

[[https://github.com/sabof/org-bullets][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook
    (org-mode . (lambda () (org-bullets-mode t))))
 #+END_SRC

** =reveal.js=

Install reveal.js from [[https://github.com/hakimel/reveal.js/][here]]. Then, install [[https://github.com/hexmode/ox-reveal][=ox-reveal=]] and [[https://github.com/hniksic/emacs-htmlize][=htmlize=]].

[[https://github.com/hexmode/ox-reveal][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal
    :config
    (setq org-reveal-root "/Users/simenojensen/.emacs.d/reveal.js/")
    (setq org-reveal-mathjax t))
#+END_SRC

** =htmlize=

[[https://github.com/hniksic/emacs-htmlize][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

* Elisp Functions
** Edit Configuration File
#+BEGIN_SRC emacs-lisp
  (defun my/edit-config ()
    "Opens the my-literate-emacs-configuration.org file."
    (interactive)
    (find-file "~/.emacs.d/my-literate-emacs-configuration.org"))
#+END_SRC

** =my/toggle-comment-on-line=

Comment or uncomment the current line. Bind to ~C-;~.

#+BEGIN_SRC emacs-lisp
  (defun my/toggle-comment-on-line ()
    (interactive)
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))

  (bind-key "C-;" 'my/toggle-comment-on-line)
#+END_SRC

* Internet
** =google-this=

[[http://pragmaticemacs.com/emacs/google-search-from-inside-emacs/][More Information]]

#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :diminish
    :config
    (google-this-mode t))
#+END_SRC
